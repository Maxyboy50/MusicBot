trigger: none

name: $(Build.DefinitionName)-$(Build.BuildId)

stages:
- stage: Build
  displayName: Build Docker image and publish
  jobs:
  - job: Build
    displayName: Build Docker image
    variables:
    - name: ecr_repository_name
      value: musicbot
    
    - name: aws_region
      value: us-east-2

    steps:
    - checkout: self

    - task: AzureKeyVault@2
      displayName: Retrieve AWS Credentials from Azure Key Vault
      inputs:
        azureSubscription: 'Azure RM Service Connection'
        KeyVaultName: 'AWSCredentialsVault'
        SecretsFilter: 'AWSAccessKey, AWSSecretKey'
        RunAsPreJob: true
    

    - bash: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account | tr -d '"')
        aws ecr get-login-password --region ${{ variables.aws_region }} | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.${{ variables.aws_region }}.amazonaws.com
      env:
        AWS_SECRET_ACCESS_KEY: $(AWSSecretKey)
        AWS_ACCESS_KEY_ID: $(AWSAccessKey)
      displayName: Login to ECR

    - bash: |
        set -e

        REPOSITORY_URI=$(aws ecr describe-repositories --repository-names "${{ variables.ecr_repository_name }}" --query "repositories[0].repositoryUri" | tr -d '"')
        if [ -z "$REPOSITORY_URI"]; then
          echo "Failed to retrieve repository uri"
          exit 1
        fi

        echo "##vso[task.setvariable variable=repository_uri;]$REPOSITORY_URI"
      env:
        AWS_SECRET_ACCESS_KEY: $(AWSSecretKey)
        AWS_ACCESS_KEY_ID: $(AWSAccessKey)
      displayName: Log ECR Repository Url

    - bash: |
        aws ecr create-repository --repository-name "${{ variables.ecr_repository_name }}"
        echo "##vso[task.setvariable variable=repository_uri;]$REPOSITORY_URI"
      env:
        AWS_SECRET_ACCESS_KEY: $(AWSSecretKey)
        AWS_ACCESS_KEY_ID: $(AWSAccessKey)
      displayName: Create repository if it doesn't exist
      condition: failed() 

    - bash: |
        docker build  --platform=linux/amd64 -t $(repository_uri):latest .
        docker push $(repository_uri):latest
      workingDirectory: $(Pipeline.Workspace)/s/
      env:
        AWS_SECRET_ACCESS_KEY: $(AWSSecretKey)
        AWS_ACCESS_KEY_ID: $(AWSAccessKey)
      displayName: Build docker image and publish

      
