trigger: none

name: $(Build.DefinitionName)-$(Build.BuildId)

variables:
- name: aws_region
  value: us-east-2

stages:
- stage: Pre_Deploy
  displayName: Build Docker image, publish, and produce terraform plan
  jobs:
  - job: Build_Image
    displayName: Build Docker image
    variables:
    - name: ecr_repository_name
      value: musicbot
    
    - group: MusicBotGroup

    steps:
    - checkout: self

    - task: AzureKeyVault@2
      displayName: Retrieve AWS Credentials from Azure Key Vault
      inputs:
        azureSubscription: 'Azure RM Service Connection'
        KeyVaultName: 'AWSCredentialsVault'
        SecretsFilter: 'AWSAccessKey, AWSSecretKey'
        RunAsPreJob: true
    

    - bash: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account | tr -d '"')
        aws ecr get-login-password --region ${{ variables.aws_region }} | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.${{ variables.aws_region }}.amazonaws.com
      env:
        AWS_SECRET_ACCESS_KEY: $(AWSSecretKey)
        AWS_ACCESS_KEY_ID: $(AWSAccessKey)
      displayName: Login to ECR

    - bash: |
        REPOSITORY_URI=$(aws ecr describe-repositories --repository-names "${{ variables.ecr_repository_name }}" --query "repositories[0].repositoryUri" | tr -d '"')
        if [ -z "$REPOSITORY_URI"]; then
          aws ecr create-repository --repository-name "${{ variables.ecr_repository_name }}"
          REPOSITORY_URI=$(aws ecr describe-repositories --repository-names "${{ variables.ecr_repository_name }}" --query "repositories[0].repositoryUri" | tr -d '"')
        fi

        echo "##vso[task.setvariable variable=repository_uri;]$REPOSITORY_URI"
      env:
        AWS_SECRET_ACCESS_KEY: $(AWSSecretKey)
        AWS_ACCESS_KEY_ID: $(AWSAccessKey)
      displayName: Log ECR Repository Url (create if doesn't exist)

    - bash: |
        docker build  --platform=linux/amd64 -t $(repository_uri):latest .
        docker push $(repository_uri):latest
      workingDirectory: $(Pipeline.Workspace)/s/
      env:
        AWS_SECRET_ACCESS_KEY: $(AWSSecretKey)
        AWS_ACCESS_KEY_ID: $(AWSAccessKey)
      displayName: Build docker image and publish

  - job: Plan
    displayName: Create terraform plan
    steps:
    - checkout: self

    - task: AzureKeyVault@2
      displayName: Retrieve AWS Credentials from Azure Key Vault
      inputs:
        azureSubscription: 'Azure RM Service Connection'
        KeyVaultName: 'AWSCredentialsVault'
        SecretsFilter: 'AWSAccessKey, AWSSecretKey'
        RunAsPreJob: true
    - bash: |
        terraform init \
        -backend-config="bucket=$(BACKEND_BUCKET)" \
        -backend-config="key=$(TFSTATE_KEY)" \
        -backend-config="region=${{ variables.aws_region }}" 
      displayName: Terraform init
      env:
       AWS_SECRET_ACCESS_KEY: $(AWSSecretKey)
       AWS_ACCESS_KEY_ID: $(AWSAccessKey)
       BACKEND_BUCKET: $(Backend_Bucket)
       TFSTATE_KEY: $(TFState_Key)
      workingDirectory: $(Pipeline.Workspace)/s/iac

    - bash: |
        echo $(music_bot_token)
        terraform plan --var music_bot_token=$(music_bot_token) --out $(Build.ArtifactStagingDirectory)/plan.json
      displayName: Produce terraform plan
      env:
      #  MUSIC_BOT_TOKEN: $(MUSICBOTTOKEN)
       AWS_SECRET_ACCESS_KEY: $(AWSSecretKey)
       AWS_ACCESS_KEY_ID: $(AWSAccessKey)
      workingDirectory: $(Pipeline.Workspace)/s/iac
    
    - publish: $(Build.ArtifactStagingDirectory)/plan.json
      artifact: terraform_plan
      displayName: Publish terraform plan for consumption

- stage: Deployment      
  dependsOn: Pre_Deploy
  displayName: Deploy Terraform resources
  jobs:
  - job: Deploy
    displayName: Deploy terraform plan
    steps:
    - download: current
      artifact: terraform_plan

    - task: AzureKeyVault@2
      displayName: Retrieve AWS Credentials from Azure Key Vault
      inputs:
        azureSubscription: 'Azure RM Service Connection'
        KeyVaultName: 'AWSCredentialsVault'
        SecretsFilter: 'AWSAccessKey, AWSSecretKey'
        RunAsPreJob: true
    
    - bash: |
        terraform init \
        -backend-config="bucket=$(BACKEND_BUCKET)" \
        -backend-config="key=$(TFSTATE_KEY)" \
        -backend-config="region=${{ variables.aws_region }}" 
      displayName: Terraform init
      env:
       AWS_SECRET_ACCESS_KEY: $(AWSSecretKey)
       AWS_ACCESS_KEY_ID: $(AWSAccessKey)
       BACKEND_BUCKET: $(Backend_Bucket)
       TFSTATE_KEY: $(TFState_Key)
      workingDirectory: $(Pipeline.Workspace)/s/iac
    
    - bash: |
        terraform apply $(Pipeline.Workspace)/terraform_plan/plan.json
      displayName: Apply terraform plan
      env:
       AWS_SECRET_ACCESS_KEY: $(AWSSecretKey)
       AWS_ACCESS_KEY_ID: $(AWSAccessKey)
      workingDirectory: $(Pipeline.Workspace)/s/iac
      
        
      
